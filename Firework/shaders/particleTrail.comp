#version 450 core

layout(local_size_x = 256) in;


layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 1) buffer Velocities {
    vec4 velocity[];
};

layout(std430, binding = 2) buffer Colours {
    vec4 colours[];
};

layout(std430, binding = 3) buffer RegionPoints {
    vec4 regionPoint[];
};

layout(std430, binding = 4) buffer Origin {
    vec4 origin[];
};

layout(binding = 0, offset = 0) uniform atomic_uint aliveCount;
 

uniform float trailRate;
uniform uint maxParticle;


void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (origin[id].w <= 0.0)
    {
        return;
    }
    uint aliveCountValue = atomicCounter(aliveCount);
    uint index = id + aliveCountValue;
    if (index > maxParticle)
    {
        return;
    }
    float offsetX = sin(float(id) * 12.9898) * 0.43758;
    float offsetY = cos(float(id) * 4.1414) * 0.21798;
    float offsetZ = sin(float(id) * 7.6736) * 0.14354;
    vec3 smallOffset = vec3(offsetX, offsetY, offsetZ) * 0.01;
    regionPoint[index] = vec4(regionPoint[id].x, regionPoint[id].y, regionPoint[id].z, 0.0);
    positions[index] = positions[id];
    velocity[index] = vec4((velocity[id].xyz * trailRate) + smallOffset, -1.0);
    origin[index] = vec4(origin[id].x, origin[id].y, origin[id].z, (origin[id].w / colours[id].x) * 2.75);
    colours[index] = vec4(2.0, 1.0, 0.5, colours[id].w);
    atomicCounterIncrement(aliveCount);
}
