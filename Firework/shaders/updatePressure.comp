#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 7) buffer PressureSSBO {
    float pressures[]; 
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

uniform float massSquared;
uniform float smoothingKernel;
uniform uint particleNum;
uniform uint maxNeighbourNum;
float sk4;
float pi = 3.14159265358979323846264338327950288;

float firstD(float dist) {
    float x = 1.0 - dist / smoothingKernel;
    return -45.0 / (pi * sk4) * x * x;
}

vec3 gradient(float dist, vec3 dir)
{
    return (firstD(dist) * -1) * dir;
}


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    sk4 = smoothingKernel * smoothingKernel * smoothingKernel * smoothingKernel;

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    for (uint i = startIndex; i < endI; ++i)
    {
        uint nIndex = neighbourList[i];
        float dist = distance(positions[idx].xyz, positions[nIndex].xyz);
        if (dist > 0.0)
        {
            vec3 dir = (positions[nIndex].xyz - positions[idx].xyz) / dist;
            forces[idx].xyz -= massSquared * (pressures[idx] / (densities[idx] * densities[idx]) 
                                           + pressures[nIndex] / (densities[nIndex] * densities[nIndex])) 
                                           * gradient(dist, dir);
        }
    }
}