#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 7) buffer PressureSSBO {
    float pressures[]; 
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 2) buffer Test { 
    vec4 test[];
};

uniform float h;
uniform uint particleNum;
uniform uint maxNeighbourNum;
uniform float spikyGrad;
uniform float mass;


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    vec3 x_i = positions[idx].xyz;
    float d_i = densities[idx];
    float p_i = pressures[idx];

    vec3 pressureVal = vec3(0.0);

    for (uint i = startIndex; i < endI; ++i)
    {
        uint ni = neighbourList[i];
        vec3 x_j = positions[ni].xyz;
        vec3 diff = x_i - x_j;
        float r2 = dot(diff, diff);
        float r = sqrt(r2);
        
        if (r > 0.0 && r < h)
        {
            float d_j = densities[ni];
            float p_j = pressures[ni];
            vec3 rnorm = diff / r;
            float w = spikyGrad * pow(h - r, 2.0);
            pressureVal += ((p_i + p_j) / (2 * d_i * d_j)) * w * rnorm;
        }
    }
    pressureVal *= -1;
    forces[idx].xyz += pressureVal / d_i;
}