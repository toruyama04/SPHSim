#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 7) buffer PressureSSBO {
    float pressures[]; 
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 2) buffer TestSSBO {
    vec4 test[];
};

uniform float smoothingKernel;
uniform uint particleNum;
uniform uint maxNeighbourNum;
uniform float poly6Coefficient;
uniform float massSquared;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];
    vec3 cpos = positions[idx].xyz;
    float dens = densities[idx];

    for (uint i = startIndex; i < endI; ++i)
    {
        uint nIndex = neighbourList[i];
        positions[idx].w = nIndex;
        float dist = distance(cpos, positions[nIndex].xyz);
        // test[idx].w = dist;
        if (dist > 0.0)
        {
            vec3 dir = (cpos - positions[nIndex].xyz) / dist;
            float x = 1.0 - dist / smoothingKernel;
            vec3 gradient = (-1.0 * (poly6Coefficient * x * x)) * dir;
            // test[idx].xyz = gradient;
            forces[idx].xyz = massSquared * ((pressures[idx] / (dens * dens)) + (pressures[nIndex] / (densities[nIndex] * densities[nIndex]))) * gradient;
        }
    }
}