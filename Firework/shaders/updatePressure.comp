#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 10) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 11) buffer EndIndex {
    uint endIndices[];
};

layout(std430, binding = 2) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 3) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 4) buffer DensitySSBO {
    float densities[];
};


uniform float restDensity;
uniform float h;
uniform float k1;
uniform float k2;
uniform uint boundaryParticleNum;
uniform uint fluidParticleNum;
uniform uint maxNeighbourNum;
uniform float kernelg;
uniform float mass;


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    uint totalidx = gl_GlobalInvocationID.x + boundaryParticleNum;
    if (idx >= fluidParticleNum) return;

    uint startIndex = idx * maxNeighbourNum;
    uint endIndex = endIndices[idx];

    vec3 x_i = positions[totalidx].xyz;
    float d_i = densities[totalidx];
    float p_i = k1 * (pow((d_i / restDensity), k2) - 1.0);

    vec3 pressureVal = vec3(0.0);

    for (uint i = 0; i < endIndex; ++i)
    {
        uint ni = neighbourList[startIndex + i];

        vec3 x_j = positions[ni].xyz;
        float d_j = densities[ni];
        float p_j;

        if (ni < boundaryParticleNum)
            p_j = p_i;
        else
            p_j = k1 * (pow((d_j / restDensity), k2) - 1.0);
   
        vec3 r_ij = x_i - x_j;
        float r2 = dot(r_ij, r_ij);

        float r = sqrt(r2);
        vec3 dir = r_ij / r;

        float q = r / h;

        vec3 w1 = kernelg * (3.0 * q * q - 2.0 * q) * dir;
        vec3 w2 = -kernelg * pow(1.0 - q, 2.0) * dir;

        float pieceWise1 = step(0.0, q) * step(q, 0.5);
        float pieceWise2 = step(0.5, q) * step(q, 1.0);
        vec3 gradW = (pieceWise1 * w1 + pieceWise2 * w2) * step(q, 1.0001);

        float coeff = mass * (p_i / (d_i * d_i) + p_j / (d_j * d_j));
        pressureVal -= coeff * gradW;
    }
    forces[idx].xyz = pressureVal;
}
