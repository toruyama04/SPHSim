#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 2) buffer predPositionsSSBO {
    vec4 predPositions[];
};

layout(std430, binding = 0) buffer positionsSSBO {
    vec4 positions[];
};

layout(std430, binding = 3) buffer forcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 4) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 10) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 11) buffer EndIndex {
    uint endIndices[];
};

uniform float h;
uniform float h2;
uniform float mass;
uniform uint fluidParticleNum;
uniform uint boundaryParticleNum;
uniform uint maxNeighbourNum;
uniform float sigma;


void main()
{
    // skip the boundary particles, we index from the first fluid particle
    uint idx = gl_GlobalInvocationID.x;
    uint totalidx = gl_GlobalInvocationID.x + boundaryParticleNum;
    if (idx >= fluidParticleNum) return;

    // resetting forces as well
    forces[idx] = vec4(0.0);

    uint startIndex = idx * maxNeighbourNum;
    uint endIndex = endIndices[idx];

    float densitySum = 0.0;
    vec3 x_i = predPositions[totalidx].xyz;

    // going through each neighbour
    for (uint i = 0; i < endIndex; ++i)
    {
        uint ni = neighbourList[startIndex + i];
        vec3 x_j = predPositions[ni].xyz;

        float r2 = dot(x_i - x_j, x_i - x_j);
        float diff = h2 - r2;

        densitySum += mass * sigma * diff * diff * diff;
    }
    // write back to densities, buffer is only for fluid particles, so dont skip
    densities[totalidx] = densitySum;
}