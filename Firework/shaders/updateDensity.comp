#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

uniform float smoothingKernel;
uniform float mass;
uniform uint particleNum;
uniform uint maxNeighbourNum;
uniform float poly6Coefficient;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    float densitySum = 0.0;
    vec3 cpos = positions[idx].xyz;

    // going through each neighbour
    for (uint i = startIndex; i < endI; ++i)
    {
        uint nIndex = neighbourList[i];
        float dist = distance(cpos, positions[nIndex].xyz);

        float x = 1.0 - (dist * dist) / (smoothingKernel * smoothingKernel);
        densitySum += poly6Coefficient * x * x * x;
    }
    densities[idx] = densitySum * mass;
}