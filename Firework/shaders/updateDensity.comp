#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};


uniform float smoothingKernel;
uniform float mass;
uniform uint particleNum;
uniform uint maxNeighbourNum;
float sk2;
float sk3;
float pi = 3.14159265358979323846264338327950288;


float kernel(float dist)
{
    float x = 1.0 - dist * dist / sk2;
    return 315.0 / (64.0 * pi * sk3) * x * x * x;
}


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    sk2 = smoothingKernel * smoothingKernel;
    sk3 = sk2 * smoothingKernel;

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    float densitySum = 0.0;

    for (uint i = startIndex; i < endI; ++i)
    {
        float dist = distance(positions[idx].xyz, positions[neighbourList[i]].xyz);
        densitySum += kernel(dist);
    }
    densities[idx] = mass * densitySum;
}