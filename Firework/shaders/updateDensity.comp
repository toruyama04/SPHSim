#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 17) buffer NeighbourListSSBO {
    float neighbourList[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 19) buffer EndIndex {
    uint endIndex[];
};

uniform float smoothingKernel;
uniform float mass;
uniform uint particleNum;
float sk2;
float sk3;
float pi = 3.14159265358979323846264338327950288;


float kernel(float dist)
{
    if (dist * dist >= sk2)
    {
        return 0.0;
    }
    else
    {
        float x = 1.0 - dist * dist / sk2;
        return 315.0 / (64.0 * pi * sk3) * x * x * x;
    }
}


void main()
{
    uint idx = gl_GlobalInvocationID.x;

    if (idx >= particleNum) return;

    sk2 = smoothingKernel * smoothingKernel;
    sk3 = sk2 * smoothingKernel;

    uint startIndex = idx * 100;
    uint endIndex = endIndex[idx];

    float densitySum = 0.0;

    for (uint i = startIndex; i < endIndex; ++i)
    {
        float dist = neighbourList[startIndex];
        densitySum += kernel(dist);
    }
    densities[idx] = mass * densitySum;
}