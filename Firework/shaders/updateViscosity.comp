#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 1) buffer Velocities {
    vec4 velocity[];
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

uniform float viscosityCoefficient;
uniform uint particleNum;
uniform float h;
uniform uint maxNeighbourNum;
uniform float mass;
uniform float e;
uniform vec3 grav;


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    vec3 x_i = positions[idx].xyz;
    vec3 v_i = velocity[idx].xyz;
    float d_i = densities[idx];

    vec3 viscosityForce = vec3(0.0);

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    // going through neighbour particles
    for (uint i = startIndex; i < endI; ++i)
    {
        uint nI = neighbourList[i];

        vec3 x_j = positions[nI].xyz;
        vec3 v_j = velocity[nI].xyz;
        float d_j = densities[nI];

        vec3 diff = x_i - x_j;
        float r2 = dot(diff, diff);
        float r = sqrt(r2);

        if (r > 0.0 && r < h)
        {
            vec3 rnorm = diff / r;
            float w = viscosityCoefficient * (h - r);
            viscosityForce += (1.0 / d_j) * (v_j - v_i) * w * rnorm;            
        }
    }
    viscosityForce *= e;
    forces[idx].xyz += viscosityForce / d_i;
    forces[idx].xyz += grav;
}