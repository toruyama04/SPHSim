#version 460

/* 
   Update Viscosity: 7
    - we re-calculate the velocity mid-way
    - includes viscosity and external forces
*/

layout(local_size_x = 256) in;

layout(std430, binding = 2) buffer PositionsSSBO {
    vec4 positions[];
};

layout(std430, binding = 1) buffer Velocities {
    vec4 velocity[];
};

layout(std430, binding = 4) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 10) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 11) buffer EndIndex {
    uint endIndices[];
};

uniform float kviscosity;
uniform float h;
uniform uint fluidParticleNum;
uniform uint boundaryParticleNum;
uniform uint maxNeighbourNum;
uniform float mass;
uniform float sigma;
uniform float dt;
uniform vec3 gravity;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    uint totalidx = gl_GlobalInvocationID.x + boundaryParticleNum;
    if (idx >= fluidParticleNum) return;

    vec3 x_i = positions[totalidx].xyz;
    vec3 v_i = velocity[totalidx].xyz;

    vec3 viscForce = vec3(0.0);

    uint startIndex = idx * maxNeighbourNum;
    uint endIndex = endIndices[idx];
    for (uint i = 0; i < endIndex; ++i)
    {
        uint ni = neighbourList[startIndex + i];

        vec3 x_j = positions[ni].xyz;
        vec3 v_j = velocity[ni].xyz;

        float d_j = densities[ni];

        vec3 v_diff = v_j - v_i;
        vec3 r_ij = x_i - x_j;
        float r = length(r_ij);

        float laplacian = sigma * (h - r);
        
        viscForce += (mass / d_j) * v_diff * laplacian;
    }
    vec3 totalForce = kviscosity * viscForce + gravity;
    vec3 v_star = v_i + (dt / mass) * totalForce;

    velocity[totalidx].xyz = v_star;
}
