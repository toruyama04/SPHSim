#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 1) buffer Velocities {
    vec4 velocity[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

uniform float massSquared;
uniform float viscosityCoefficient;
uniform float particleNum;
uniform float smoothingKernel;
uniform uint maxNeighbourNum;
float sk5;
float pi = 3.14159265358979323846264338327950288;


float secondD(float dist)
{
    float x = 1.0 - dist / smoothingKernel;
    return 90.0 / (pi * sk5) * x;
}


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    sk5 = smoothingKernel * smoothingKernel * smoothingKernel * smoothingKernel * smoothingKernel;

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    // going through neighbour particles
    for (uint i = startIndex; i < endI; ++i)
    {
        uint nIndex = neighbourList[i];
        float dist = distance(positions[idx].xyz, positions[nIndex].xyz);
        forces[idx].xyz += viscosityCoefficient * massSquared * (velocity[nIndex].xyz - velocity[idx].xyz) / densities[nIndex] * secondD(dist);
    }
}