#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 1) buffer Velocities {
    vec4 velocity[];
};

layout(std430, binding = 5) buffer ForcesSSBO {
    vec4 forces[];
};

layout(std430, binding = 6) buffer DensitySSBO {
    float densities[];
};

layout(std430, binding = 14) buffer NeighbourListSSBO {
    uint neighbourList[];
};

layout(std430, binding = 16) buffer EndIndex {
    uint endIndex[];
};

uniform float viscosityCoefficient;
uniform uint particleNum;
uniform float smoothingKernel;
uniform uint maxNeighbourNum;
uniform float spikyCoefficient;
uniform float massSquared;


void main()
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    vec3 pos = positions[idx].xyz;
    vec3 vel = velocity[idx].xyz;
    vec3 force = vec3(0.0);

    uint startIndex = idx * maxNeighbourNum;
    uint endI = endIndex[idx];

    // going through neighbour particles
    for (uint i = startIndex; i < endI; ++i)
    {
        uint nIndex = neighbourList[i];
        vec3 posN = positions[nIndex].xyz;
        vec3 velN = velocity[nIndex].xyz;
        float densN = densities[nIndex];

        float dist = distance(pos, posN);
        float x = 1.0 - dist / smoothingKernel;
        forces[idx].xyz += viscosityCoefficient * massSquared * (velN - vel) / densN * (spikyCoefficient * x);
    }
    forces[idx].xyz += force;
}