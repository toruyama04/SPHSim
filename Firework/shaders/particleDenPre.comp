#version 460 core

layout (local_size_x = 256) in;

// w component is current lifetime of particle
layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

// density, pressure, mass, w
layout(std430, binding = 2) buffer Fluid {
    vec4 fluids[];
};

// smoothing length, rest density, pressure stiffness
uniform float smoothing_length;
uniform float rest_density;
uniform float pressure_stiffness;

// smoothing kernel function used to calculate the influence of neighbouring particles
//  returns a weight based on distance between particles and smoothing length h
float kernel(float r, float h) {
    float q = r / h;
    if (q <= 1.0) {
        return (315.0 / (64.0 * 3.1415927 * pow(h, 9.0))) * pow(h * h - r * r, 3.0);
    }
    return 0.0;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    vec3 pos_i = positions[id].xyz;
    float mass_i = fluids[id].z;
    
    float density = 0.0;
    float pressure = 0.0;

    for (uint j = 0; j < gl_NumWorkGroups.x * gl_WorkGroupSize.x; ++j) {
        if (j == id) continue;

        vec3 pos_j = positions[j].xyz;
        float mass_j = fluids[j].z;

        vec3 diff = pos_i - pos_j;
        float r = length(diff);
        
        if (r < smoothing_length) {
            float w = kernel(r, smoothing_length);
            density += mass_j * w;
        }
    }

    fluids[id].x = density;
    pressure = pressure_stiffness * (density - rest_density);
    fluids[id].y = pressure;
}


