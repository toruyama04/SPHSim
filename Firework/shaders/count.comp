#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 9) buffer particleNumPerBinSSBO {
    uint bins[];
};

layout(std430, binding = 10) buffer binIndexForParticleSSBO {
    uint particleBinIndex[];
};

uniform vec3 gridResolution;
uniform vec3 gridOrigin;
uniform float gridSpacing;
uniform uint particleNum;


void main()
{   
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    vec3 pos = positions[idx].xyz;
    vec3 gridPos = (pos - gridOrigin) / gridSpacing;

    float gridPosx = floor(gridPos.x);
    float gridPosy = floor(gridPos.y);
    float gridPosz = floor(gridPos.z);

    if (gridPosx >= 0 && gridPosx < gridResolution.x &&
        gridPosy >= 0 && gridPosy < gridResolution.y &&
        gridPosz >= 0 && gridPosz < gridResolution.z) {

        uint binIndex = uint(gridPosx + (gridPosy * gridResolution.x) + (gridPosz * gridResolution.x * gridResolution.y));

        particleBinIndex[idx] = binIndex;

        atomicAdd(bins[binIndex], 1);
    } else {
        positions[idx].w = -1.0;
    }
}
