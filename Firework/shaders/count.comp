#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 9) buffer particleNumPerBinSSBO {
    uint bins[];
};

layout(std430, binding = 10) buffer binIndexForParticleSSBO {
    uint particleBinIndex[];
};

uniform uvec3 gridResolution;
uniform vec3 gridOrigin;
uniform float gridSpacing;
uniform uint particleNum;

uint computeGridIndex(vec3 gridPos)
{
    return uint(gridPos.x) + uint(gridPos.y) * gridResolution.x + uint(gridPos.z) * gridResolution.x * gridResolution.y;
}


void main()
{   
    uint idx = gl_GlobalInvocationID.x;

    if (idx >= particleNum) return;

    vec3 pos = positions[idx].xyz;

    uint gridPosx = uint(floor(pos.x - gridOrigin.x));
    uint gridPosy = uint(floor(pos.y - gridOrigin.y));
    uint gridPosz = uint(floor(pos.z - gridOrigin.z));

    if (gridPosx >= 0 && gridPosx < gridResolution.x &&
        gridPosy >= 0 && gridPosy < gridResolution.y &&
        gridPosz >= 0 && gridPosz < gridResolution.z) {

        uint binIndex = gridPosx + (gridPosy * 10) + (gridPosz * 10 * 10);
        particleBinIndex[idx] = binIndex;

        atomicAdd(bins[binIndex], 1);
    }
}
