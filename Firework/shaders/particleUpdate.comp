#version 460 core

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer Positions {
    vec4 positions[];
};

layout(std430, binding = 1) buffer Velocities {
    vec4 velocity[];
};

layout(std430, binding = 2) buffer Flags {
    int flags[];
};

layout(binding = 0, offset = 0) uniform atomic_uint aliveCount;

uniform float deltaTime;
uniform vec3  grav;
uniform float minVelocity;

void main() {
    uint id = gl_GlobalInvocationID.x;
    positions[id].w -= deltaTime;
    if (positions[id].w < 0.0) {
        positions[id].w = -1.0;
        flags[id] = 0;
        return;
    }
    flags[id] = 1;
    // float lifeR = positions[id].w / velocity[id].w;
    vec3 particleDirection = normalize(velocity[id].xyz);

    // Gravity effect
    // float gravForce = 1.0 - lifeR;
    velocity[id].xyz += deltaTime * grav * 0.2;

    float decayFactor = exp(-0.003);
    velocity[id].xyz *= decayFactor;

    // Update position and lifetime
    positions[id].xyz += velocity[id].xyz * deltaTime;
    atomicCounterIncrement(aliveCount);
}
