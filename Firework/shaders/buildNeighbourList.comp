#version 460

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer positionsSSBO {
    vec4 positions[];
};

layout(std430, binding = 12) buffer particlesOrderedByBinSSBO {
    uint particlesOrderedByBin[];
};

layout(std430, binding = 11) buffer prefixForBinReorderSSBO {
    uint prefixSum[];
};

layout(std430, binding = 13) buffer flatNeighborsSSBO {
    uint flatNeighbors[];
};

layout(std430, binding = 14) buffer neighborListSSBO {
    uint neighborList[];
};

layout(std430, binding = 10) buffer binIndexForParticleSSBO {
    uint binIndexForParticle[];
};

layout(std430, binding = 16) buffer endIndexBuffer {
    uint endIndex[];
};

uniform float searchRadius;
uniform uint maxNeighborsPerParticle;
uniform uint particleNum;


void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleNum) return;

    vec3 particlePos = positions[idx].xyz;
    uint binIndex = binIndexForParticle[idx];

    uint neighborListStart = idx * maxNeighborsPerParticle;
    uint neighborCount = 0;

    for (uint i = 0; i < 27; ++i) {
        uint neighborBinIndex = flatNeighbors[binIndex * 27 + i];

        if (neighborBinIndex == 111111) {
            continue;
        }

        uint neighborBinStart = prefixSum[neighborBinIndex];
        uint neighborBinEnd = prefixSum[neighborBinIndex + 1];

        // Iterate over all particles in the neighboring bin
        for (uint j = neighborBinStart; j < neighborBinEnd; ++j) {
            uint nIndex = particlesOrderedByBin[j];
            vec3 neighborPos = positions[nIndex].xyz;
            float dist = dot(particlePos - neighborPos, particlePos - neighborPos);

            if (dist < (searchRadius * 2.0) * (searchRadius * 2.0)) {
                neighborList[neighborListStart + neighborCount] = nIndex;
                neighborCount++;

                // exit early if we reach maxNeighbourCount
                if (neighborCount >= maxNeighborsPerParticle) {
                    endIndex[idx] = neighborListStart + neighborCount;
                    return;
                }
            }
        }
    }

    endIndex[idx] = neighborListStart + neighborCount;
}
