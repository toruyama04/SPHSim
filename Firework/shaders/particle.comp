#version 450 core

layout(local_size_x = 256) in;

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 alpha;
    vec4 regionPoint;
    float lifetime;
    float fadeRate;
    float originX;
    float originY;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

uniform float deltaTime;
uniform vec3 grav;
uniform float maxLife;
uniform float dampingFactor;
uniform float minVelocity;
uniform float attractionStrength;

void main() {
    uint id = gl_GlobalInvocationID.x;
    Particle particle = particles[id];

    // Update velocity with damping
    vec3 velocityDiff = particle.velocity.xyz - normalize(particle.velocity.xyz) * minVelocity;
    particle.velocity.xyz -= velocityDiff * (1.0 - pow(dampingFactor, deltaTime));

    // Gravity effect
    float lifeR = particle.lifetime / maxLife;
    // vec3 gravForce = grav * smoothstep(0.8, 0.0, lifeR);
    // particle.velocity.xyz += gravForce * deltaTime;

    if (lifeR < 0.75)
    {
        vec3 toRegionPoint = particle.regionPoint.xyz - particle.position.xyz;
        vec3 attractionVelocity = normalize(toRegionPoint) * attractionStrength * particle.originX;
        attractionVelocity *= smoothstep(0.0, 0.5, lifeR);
        particle.velocity.xyz += attractionVelocity * deltaTime;
    }


    // Update position and lifetime
    particle.position.xyz += particle.velocity.xyz * deltaTime;
    particle.lifetime -= deltaTime;

    // Fade out
    if (particle.originX == 1.0f)
    {
        particle.alpha.w -= particle.fadeRate * deltaTime;
    }
    else {
        particle.alpha.w -= particle.fadeRate * deltaTime * 1.1;
    }
    

    // Write back the updated particle
    particles[id] = particle;
}